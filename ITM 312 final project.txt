HEADER.H FILE------------------------------------------------------------------



#include <iostream>
#include <string>
using namespace std;

//create a class called tictactoe
class tictactoe {

public:
	//empty string containers for player names
	string p1 = "";
	string p2 = "";
	//initialize int containers for scores and choices
	int p1score = 0; 
	int p2score = 0; 
	int drawscore = 0;
	int menuchoice = 0;
	int boxchoice = 0; 
	//initialize char with X and O symbols for players
	char p1symbol = 'X'; 
	char p2symbol = 'O'; 
	//array that the tictactoe board/s holds X or O
	char array[9] = { '1','2','3','4','5','6','7','8','9' }; 
	//initialize player1's turn to start game
	int turn = 1; 
	//initialize boolean to check the winner
	bool istherewinner = false; 
	//marker for comp to choose moves
	int compmove = 0;
	// container for total moves for draw
	int totalmovecounter = 0;
	//define constructor						 
	tictactoe() 
	{ 
		mmenu(); 
	};
	//functions
	void displayboard();
	void setboardwithchoice(int c);
	void displayscore();
	void hrungetmove();
	void hcheckforwin();
	void crun();
	void compstrategy();
	void hmenu();
	void mmenu();
	void resetscores() 
	{ 
		p1score = 0, p2score = 0, drawscore = 0, p1 = "", p2 = ""; 
	};
	void hresetboard();
};








SOURCE.CPP FILE-------------------------------------------------------


/*
Mohmedamir Arther 
ITM 312 
12/1/17
Final Project: TicTacToe Game
*/

#include <iostream>
#include <string>
#include <cstdlib>
#include <time.h>
#include "Header.h"
using namespace std;

void main()
{
	srand(time(NULL));
	tictactoe a;
	system("PAUSE");
}

void tictactoe::displayboard() //function to display the board
{
	system("cls");
	cout << " TICTACTOE\n";
	cout << " ---------\n";
	cout << " ___ ___ ___" << endl << endl;
	cout << " [ " << array[0] << " | " << array[1] << " | " << array[2] << " ]" << endl;
	cout << " ___ ___ ___" << endl << endl;
	cout << " [ " << array[3] << " | " << array[4] << " | " << array[5] << " ]" << endl;
	cout << " ___ ___ ___" << endl << endl;
	cout << " [ " << array[6] << " | " << array[7] << " | " << array[8] << " ]" << endl;
	cout << " ___ ___ ___" << endl << endl;
}

void tictactoe::setboardwithchoice(int c) //this function takes the choice and matches it to the proper board box
{
	switch (c)
	{
		case 1:
			if (turn % 2 != 0) 
			{ 
				array[0] = p1symbol; 
			}
			else 
				array[0] = p2symbol; 
			break;
		case 2:
			if (turn % 2 != 0) 
			{ 
				array[1] = p1symbol; 
			}
			else 
				array[1] = p2symbol;
			break;
		case 3:
			if (turn % 2 != 0) 
			{ 
				array[2] = p1symbol; 
			}
			else 
				array[2] = p2symbol;
			break;
		case 4:
			if (turn % 2 != 0) 
			{ 
				array[3] = p1symbol; 
			}
			else 
				array[3] = p2symbol;
			break;
		case 5:
			if (turn % 2 != 0) 
			{ 
				array[4] = p1symbol;
			}
			else 
				array[4] = p2symbol;
			break;
		case 6:
			if (turn % 2 != 0) 
			{ 
				array[5] = p1symbol; 
			}
			else 
				array[5] = p2symbol;
			break;
		case 7:
			if (turn % 2 != 0)
			{ 
				array[6] = p1symbol;
			}
			else 
				array[6] = p2symbol;
			break;
		case 8:
			if (turn % 2 != 0) 
			{ 
				array[7] = p1symbol; 
			}
			else 
				array[7] = p2symbol;
			break;
		case 9:
			if (turn % 2 != 0) 
			{ 
				array[8] = p1symbol;
			}
			else 
				array[8] = p2symbol;
			break;
	}
}

void tictactoe::displayscore() //function to output the scores of each player
	{
		cout << " SCORE\n";
		cout << " -----\n";
		cout << " " << p1 << ": " << p1score << endl;
		cout << " " << p2 << ": " << p2score << endl;
		cout << " DRAW: " << drawscore << endl << endl;
	}

void tictactoe::hrungetmove() //function for a 2 human player game mode that allows for taking of turns and checking the board for a winner after everyturn then incrementing the turn variable
{
	do {
			displayboard();
			if (turn % 2 != 0)
			{
				cout << p1 << " which numbered box do you choose?";
				cin >> boxchoice;
				setboardwithchoice(boxchoice);
				totalmovecounter++;
			}
			else
			{
				cout << p2 << " which numbered box do you choose?";
				cin >> boxchoice;
				setboardwithchoice(boxchoice);
				totalmovecounter++;
			}
			hcheckforwin();
			++turn;
		} 
	while (istherewinner == false);
}

void tictactoe::hcheckforwin() //function to check for wins then provides a menu
{
	if (((array[0] == 'X') && (array[1] == 'X') && (array[2] == 'X')) || ((array[3] == 'X') && (array[4] == 'X') && (array[5] == 'X')) || ((array[6] == 'X') && (array[7] == 'X') && (array[8] == 'X'))) 
	{ 
			displayboard();
			istherewinner = true;
			cout << p1 << " is the WINNER with a horizontal win!\n\n"; ++p1score;
			displayscore();
			hmenu();
	}
	else if (((array[0] == 'O') && (array[1] == 'O') && (array[2] == 'O')) || ((array[3] == 'O') && (array[4] == 'O') && (array[5] == 'O')) || ((array[6] == 'O') && (array[7] == 'O') && (array[8] == 'O'))) 
	{ 
		displayboard();
		istherewinner = true;
		cout << p2 << " is the WINNER with a horizontal win!\n\n";
		++p2score; 
		displayscore();
		hmenu(); 
	}
	else if (((array[0] == 'X') && (array[3] == 'X') && (array[6] == 'X')) || ((array[1] == 'X') && (array[4] == 'X') && (array[7] == 'X')) || ((array[2] == 'X') && (array[5] == 'X') && (array[8] == 'X')))
	{ 
		displayboard();
		istherewinner = true; 
		cout << p1 << " is the WINNER with a vertical win!\n\n";
		++p1score; 
		displayscore(); 
		hmenu(); 
	}
	else if (((array[0] == 'O') && (array[3] == 'O') && (array[6] == 'O')) || ((array[1] == 'O') && (array[4] == 'O') && (array[7] == 'O')) || ((array[2] == 'O') && (array[5] == 'O') && (array[8] == 'O'))) 
	{ 
		displayboard();
		istherewinner = true;
		cout << p2 << " is the WINNER with a vertical win!\n\n";
		++p2score; 
		displayscore(); 
		hmenu();
	}
	else if (((array[0] == 'X') && (array[4] == 'X') && (array[8] == 'X')) || ((array[2] == 'X') && (array[4] == 'X') && (array[6] == 'X'))) 
	{ 
		displayboard();
		istherewinner = true;
		cout << p1 << " is the WINNER with a diagonal win!\n\n";
		++p1score; 
		displayscore(); 
		hmenu(); 
	}
	else if (((array[0] == 'O') && (array[4] == 'O') && (array[8] == 'O')) || ((array[2] == 'O') && (array[4] == 'O') && (array[6] == 'O'))) 
	{ 
		displayboard();
		istherewinner = true;
		cout << p2 << " is the WINNER with a diagonal win!\n\n"; 
		++p2score; 
		displayscore(); 
		hmenu(); 
	}
	else if (totalmovecounter == 9) 
	{
		displayboard();
		istherewinner = true; 
		cout << "THERE IS NO WINNER! IT IS A DRAW\n\n"; 
		++drawscore; 
		displayscore(); 
		hmenu();
	}
}

void tictactoe::crun()
{
	if (p1 == "COMP")
		do {
				compstrategy();
				totalmovecounter++;
				hcheckforwin();
				++turn;
				displayboard();
				cout << p2 << " which numbered box do you choose?";
				cin >> boxchoice;
				setboardwithchoice(boxchoice);
				totalmovecounter++;
				hcheckforwin();
				++turn;
			} 
		while (istherewinner == false);
	else if (p2 == "COMP")
		do {
				displayboard();
				cout << p1 << " which numbered box do you choose?";
				cin >> boxchoice;
				setboardwithchoice(boxchoice);
				totalmovecounter++;
				hcheckforwin();
				++turn;
				compstrategy();
				totalmovecounter++;
				hcheckforwin();
				++turn;
			} 
		while (istherewinner == false);
}

void tictactoe::compstrategy() //function that gives algorithms to computer for it's next move.
{
	if (p1 == "COMP" && compmove == 0) 
	{ 
		setboardwithchoice(5); compmove++; 
	}
	else if (p1 == "COMP"&& compmove == 1)
	{
		if (array[2] == '3') 
		{ 
			setboardwithchoice(3); 
			compmove++; 
		}
		else if (array[8] == '9') 
		{ setboardwithchoice(9); 
		compmove++; 
		}
	}
	else if (p1 == "COMP"&& compmove == 2)
	{
		if (array[2] == 'X') 
		{
			if (array[6] == '7') 
			{ 
				setboardwithchoice(7); 
				compmove++; 
			}
			else if (array[8] == '9') 
			{ 
				setboardwithchoice(9); 
				compmove++; 
			}
			else if (array[0] == '1') 
			{ 
				setboardwithchoice(1); 
				compmove++; 
			}	
		}
		if (array[8] == 'X') 
		{
			if (array[0] == '1') 
			{ 
				setboardwithchoice(1);
				compmove++;
			}
			else if (array[6] == '7')
			{ 
				setboardwithchoice(7);
				compmove++; 
			}
		}
	}
	else if (p1 == "COMP"&& compmove == 3)
	{
		if (array[2] == 'X') 
		{
			if (array[5] == '6') 
			{ 
				setboardwithchoice(6); 
				compmove++; 
			}
			else if (array[0] == '1') 
			{ 
				setboardwithchoice(1);
				compmove++; 
			}
		}
		if (array[8] == 'X')
		{
			if (array[7] == '8') 
			{ 
				setboardwithchoice(8);
				compmove++; 
			}
			else if (array[2] == '3') 
			{ 
				setboardwithchoice(3); 
				compmove++; 
			}
		}
	}
	else if (p2 == "COMP" && compmove == 0)
	{
		if (array[4] == '5') 
		{
			setboardwithchoice(5);
			compmove++;
		}
		else if (array[2] == '3')
		{ 
			setboardwithchoice(3);
			compmove++; 
		}
	}
	else if (p2 == "COMP"&& compmove == 1)
	{
		if (array[2] == '3') 
		{
			
			setboardwithchoice(3); 
			compmove++;
		}
		else if (array[8] == '9')
		{ 
			setboardwithchoice(9);
			compmove++;
		}
	}
	else if (p2 == "COMP"&& compmove == 2)
	{
		if (array[2] == 'O') 
		{
			if (array[6] == '7') 
			{
				setboardwithchoice(7);
				compmove++; 
			}
			else if (array[8] == '9')
			{ 
				setboardwithchoice(9); 
				compmove++;
			}
			else if (array[0] == '1') 
			{
				setboardwithchoice(1);
				compmove++;
			}
		}
		if (array[8] == 'O') 
		{
			if (array[6] == '7') 
			{
				setboardwithchoice(7);
				compmove++;
			}
			else if (array[0] == '1')
			{ 
				setboardwithchoice(1); 
				compmove++;
			}
		}
	}
	else if (p2 == "COMP"&& compmove == 3)
	{
		if (array[2] == 'O') 
		{
			if (array[5] == '6') 
			{ 
				setboardwithchoice(6); 
				compmove++; 
			}
			else if (array[0] == '1') 
			{
				setboardwithchoice(1); 
				compmove++;
			}
		}
		if (array[8] == 'O') 
		{
			if (array[0] == '1') 
			{
				setboardwithchoice(1); 
				compmove++; 
			}
			if (array[7] == '8') 
			{
				setboardwithchoice(8); 
				compmove++; 
			}
			else if (array[2] == '3')
			{
				setboardwithchoice(3);
				compmove++;
			}
		}
	}
	else if (p2 == "COMP"&& compmove == 4)
	{
		if (array[2] == 'O') 
		{
			if (array[5] == '6') 
			{
				setboardwithchoice(6);
				compmove++; 
			}
			else if (array[0] == '1') 
			{
				setboardwithchoice(1); 
				compmove++; 
			}
		}
		if (array[8] == 'O') 
		{
			if (array[7] == '8')
			{ 
				setboardwithchoice(8);
				compmove++; 
			}
			else if (array[2] == '3')
			{ 
				setboardwithchoice(3); 
				compmove++; 
			}
		}
	}
}

void tictactoe::hmenu()//function to ask the user if they want to play again, to go back to the main menu, or to quit the game/program.
{
	cout << "1.Play Again?\n2.Main Menu\n3.Quit\n";
	cin >> menuchoice;
	switch (menuchoice)
	{
		case 1:
			hresetboard();
			if (p1 == "COMP" || p2 == "COMP") 
			{ 
				crun(); 
			}
			else 
			{
				hrungetmove(); 
			}
			break;
		case 2:
			resetscores(); 
			hresetboard(); 
			mmenu(); 
			break;
		case 3: 
			exit(0);
	}
}

void tictactoe::mmenu()//function to display and ask the user to choose from the main menu
{
	system("cls");
	cout << " Welcome to the tictactoe game.\n\n";
	cout << " Main Menu\n";
	cout << " ---------\n";
	cout << " Press 1 to play with the COMPUTER\n";
	cout << " Press 2 to play 2 player game\n";
	cout << " Press 3 to see how to Play TicTacToe\n";
	cout << " Press 4 to Quit\n\n";
	cin >> menuchoice;
	switch (menuchoice)
	{
		case 1:
			cout << "CHOOSE:\n1.Player1\n2.Player2\n";
			cin >> menuchoice;
			if (menuchoice == 1) 
			{
				p2 = "COMP";
				cout << " Player 1: What is your name?\n";
				cin >> p1;
			}
			else 
			{ 
				p1 = "COMP";
				cout << " Player 2: What is your name?\n";
				cin >> p2; 
			}
			crun();
			break;
		case 2:
			cout << "PLAYER 1: What is your name? ";
			cin >> p1;
			cout << "PLAYER 2: What is your name? ";
			cin >> p2;
			hrungetmove();
			break;
		case 3:
			cout << "TAKE TURNS, GET 3 OF YOUR SYMBOLS IN A ROW AND YOU WIN! SIMPLE!\n";
			system("pause"); 
			mmenu(); 
			break;
		case 4: 
			exit(0);
	}
}

void tictactoe::hresetboard()//function to clear the board, if chosen to play again
{
	totalmovecounter = 0;
	array[0] = '1';
	array[1] = '2';
	array[2] = '3';
	array[3] = '4';
	array[4] = '5';
	array[5] = '6';
	array[6] = '7';
	array[7] = '8';
	array[8] = '9';
	turn = 1;
	istherewinner = false;
	compmove = 0;
}

